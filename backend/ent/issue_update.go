// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/ent/issue"
	"server/ent/issuetag"
	"server/ent/predicate"
	"server/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IssueUpdate is the builder for updating Issue entities.
type IssueUpdate struct {
	config
	hooks    []Hook
	mutation *IssueMutation
}

// Where appends a list predicates to the IssueUpdate builder.
func (iu *IssueUpdate) Where(ps ...predicate.Issue) *IssueUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetName sets the "name" field.
func (iu *IssueUpdate) SetName(s string) *IssueUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetDescription sets the "description" field.
func (iu *IssueUpdate) SetDescription(s string) *IssueUpdate {
	iu.mutation.SetDescription(s)
	return iu
}

// SetStatus sets the "status" field.
func (iu *IssueUpdate) SetStatus(i issue.Status) *IssueUpdate {
	iu.mutation.SetStatus(i)
	return iu
}

// SetCreatedAt sets the "created_at" field.
func (iu *IssueUpdate) SetCreatedAt(t time.Time) *IssueUpdate {
	iu.mutation.SetCreatedAt(t)
	return iu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableCreatedAt(t *time.Time) *IssueUpdate {
	if t != nil {
		iu.SetCreatedAt(*t)
	}
	return iu
}

// SetOwnerID sets the "owner_id" field.
func (iu *IssueUpdate) SetOwnerID(i int) *IssueUpdate {
	iu.mutation.SetOwnerID(i)
	return iu
}

// SetIssueCreatorID sets the "issueCreator" edge to the User entity by ID.
func (iu *IssueUpdate) SetIssueCreatorID(id int) *IssueUpdate {
	iu.mutation.SetIssueCreatorID(id)
	return iu
}

// SetIssueCreator sets the "issueCreator" edge to the User entity.
func (iu *IssueUpdate) SetIssueCreator(u *User) *IssueUpdate {
	return iu.SetIssueCreatorID(u.ID)
}

// AddAssignedTagIDs adds the "assignedTags" edge to the IssueTag entity by IDs.
func (iu *IssueUpdate) AddAssignedTagIDs(ids ...int) *IssueUpdate {
	iu.mutation.AddAssignedTagIDs(ids...)
	return iu
}

// AddAssignedTags adds the "assignedTags" edges to the IssueTag entity.
func (iu *IssueUpdate) AddAssignedTags(i ...*IssueTag) *IssueUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.AddAssignedTagIDs(ids...)
}

// Mutation returns the IssueMutation object of the builder.
func (iu *IssueUpdate) Mutation() *IssueMutation {
	return iu.mutation
}

// ClearIssueCreator clears the "issueCreator" edge to the User entity.
func (iu *IssueUpdate) ClearIssueCreator() *IssueUpdate {
	iu.mutation.ClearIssueCreator()
	return iu
}

// ClearAssignedTags clears all "assignedTags" edges to the IssueTag entity.
func (iu *IssueUpdate) ClearAssignedTags() *IssueUpdate {
	iu.mutation.ClearAssignedTags()
	return iu
}

// RemoveAssignedTagIDs removes the "assignedTags" edge to IssueTag entities by IDs.
func (iu *IssueUpdate) RemoveAssignedTagIDs(ids ...int) *IssueUpdate {
	iu.mutation.RemoveAssignedTagIDs(ids...)
	return iu
}

// RemoveAssignedTags removes "assignedTags" edges to IssueTag entities.
func (iu *IssueUpdate) RemoveAssignedTags(i ...*IssueTag) *IssueUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.RemoveAssignedTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IssueUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(iu.hooks) == 0 {
		if err = iu.check(); err != nil {
			return 0, err
		}
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IssueMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iu.check(); err != nil {
				return 0, err
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			if iu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IssueUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IssueUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IssueUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *IssueUpdate) check() error {
	if v, ok := iu.mutation.Name(); ok {
		if err := issue.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Issue.name": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Description(); ok {
		if err := issue.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Issue.description": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Status(); ok {
		if err := issue.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Issue.status": %w`, err)}
		}
	}
	if _, ok := iu.mutation.IssueCreatorID(); iu.mutation.IssueCreatorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Issue.issueCreator"`)
	}
	return nil
}

func (iu *IssueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   issue.Table,
			Columns: issue.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: issue.FieldID,
			},
		},
	}
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: issue.FieldName,
		})
	}
	if value, ok := iu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: issue.FieldDescription,
		})
	}
	if value, ok := iu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: issue.FieldStatus,
		})
	}
	if value, ok := iu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: issue.FieldCreatedAt,
		})
	}
	if iu.mutation.IssueCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.IssueCreatorTable,
			Columns: []string{issue.IssueCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.IssueCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.IssueCreatorTable,
			Columns: []string{issue.IssueCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.AssignedTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   issue.AssignedTagsTable,
			Columns: issue.AssignedTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: issuetag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedAssignedTagsIDs(); len(nodes) > 0 && !iu.mutation.AssignedTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   issue.AssignedTagsTable,
			Columns: issue.AssignedTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: issuetag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.AssignedTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   issue.AssignedTagsTable,
			Columns: issue.AssignedTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: issuetag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{issue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// IssueUpdateOne is the builder for updating a single Issue entity.
type IssueUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IssueMutation
}

// SetName sets the "name" field.
func (iuo *IssueUpdateOne) SetName(s string) *IssueUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetDescription sets the "description" field.
func (iuo *IssueUpdateOne) SetDescription(s string) *IssueUpdateOne {
	iuo.mutation.SetDescription(s)
	return iuo
}

// SetStatus sets the "status" field.
func (iuo *IssueUpdateOne) SetStatus(i issue.Status) *IssueUpdateOne {
	iuo.mutation.SetStatus(i)
	return iuo
}

// SetCreatedAt sets the "created_at" field.
func (iuo *IssueUpdateOne) SetCreatedAt(t time.Time) *IssueUpdateOne {
	iuo.mutation.SetCreatedAt(t)
	return iuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableCreatedAt(t *time.Time) *IssueUpdateOne {
	if t != nil {
		iuo.SetCreatedAt(*t)
	}
	return iuo
}

// SetOwnerID sets the "owner_id" field.
func (iuo *IssueUpdateOne) SetOwnerID(i int) *IssueUpdateOne {
	iuo.mutation.SetOwnerID(i)
	return iuo
}

// SetIssueCreatorID sets the "issueCreator" edge to the User entity by ID.
func (iuo *IssueUpdateOne) SetIssueCreatorID(id int) *IssueUpdateOne {
	iuo.mutation.SetIssueCreatorID(id)
	return iuo
}

// SetIssueCreator sets the "issueCreator" edge to the User entity.
func (iuo *IssueUpdateOne) SetIssueCreator(u *User) *IssueUpdateOne {
	return iuo.SetIssueCreatorID(u.ID)
}

// AddAssignedTagIDs adds the "assignedTags" edge to the IssueTag entity by IDs.
func (iuo *IssueUpdateOne) AddAssignedTagIDs(ids ...int) *IssueUpdateOne {
	iuo.mutation.AddAssignedTagIDs(ids...)
	return iuo
}

// AddAssignedTags adds the "assignedTags" edges to the IssueTag entity.
func (iuo *IssueUpdateOne) AddAssignedTags(i ...*IssueTag) *IssueUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.AddAssignedTagIDs(ids...)
}

// Mutation returns the IssueMutation object of the builder.
func (iuo *IssueUpdateOne) Mutation() *IssueMutation {
	return iuo.mutation
}

// ClearIssueCreator clears the "issueCreator" edge to the User entity.
func (iuo *IssueUpdateOne) ClearIssueCreator() *IssueUpdateOne {
	iuo.mutation.ClearIssueCreator()
	return iuo
}

// ClearAssignedTags clears all "assignedTags" edges to the IssueTag entity.
func (iuo *IssueUpdateOne) ClearAssignedTags() *IssueUpdateOne {
	iuo.mutation.ClearAssignedTags()
	return iuo
}

// RemoveAssignedTagIDs removes the "assignedTags" edge to IssueTag entities by IDs.
func (iuo *IssueUpdateOne) RemoveAssignedTagIDs(ids ...int) *IssueUpdateOne {
	iuo.mutation.RemoveAssignedTagIDs(ids...)
	return iuo
}

// RemoveAssignedTags removes "assignedTags" edges to IssueTag entities.
func (iuo *IssueUpdateOne) RemoveAssignedTags(i ...*IssueTag) *IssueUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.RemoveAssignedTagIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IssueUpdateOne) Select(field string, fields ...string) *IssueUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Issue entity.
func (iuo *IssueUpdateOne) Save(ctx context.Context) (*Issue, error) {
	var (
		err  error
		node *Issue
	)
	if len(iuo.hooks) == 0 {
		if err = iuo.check(); err != nil {
			return nil, err
		}
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IssueMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iuo.check(); err != nil {
				return nil, err
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			if iuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IssueUpdateOne) SaveX(ctx context.Context) *Issue {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IssueUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IssueUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *IssueUpdateOne) check() error {
	if v, ok := iuo.mutation.Name(); ok {
		if err := issue.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Issue.name": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Description(); ok {
		if err := issue.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Issue.description": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Status(); ok {
		if err := issue.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Issue.status": %w`, err)}
		}
	}
	if _, ok := iuo.mutation.IssueCreatorID(); iuo.mutation.IssueCreatorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Issue.issueCreator"`)
	}
	return nil
}

func (iuo *IssueUpdateOne) sqlSave(ctx context.Context) (_node *Issue, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   issue.Table,
			Columns: issue.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: issue.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Issue.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, issue.FieldID)
		for _, f := range fields {
			if !issue.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != issue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: issue.FieldName,
		})
	}
	if value, ok := iuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: issue.FieldDescription,
		})
	}
	if value, ok := iuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: issue.FieldStatus,
		})
	}
	if value, ok := iuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: issue.FieldCreatedAt,
		})
	}
	if iuo.mutation.IssueCreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.IssueCreatorTable,
			Columns: []string{issue.IssueCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.IssueCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.IssueCreatorTable,
			Columns: []string{issue.IssueCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.AssignedTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   issue.AssignedTagsTable,
			Columns: issue.AssignedTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: issuetag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedAssignedTagsIDs(); len(nodes) > 0 && !iuo.mutation.AssignedTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   issue.AssignedTagsTable,
			Columns: issue.AssignedTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: issuetag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.AssignedTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   issue.AssignedTagsTable,
			Columns: issue.AssignedTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: issuetag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Issue{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{issue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
