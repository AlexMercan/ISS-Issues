// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/ent/issue"
	"server/ent/issuetag"
	"server/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IssueCreate is the builder for creating a Issue entity.
type IssueCreate struct {
	config
	mutation *IssueMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ic *IssueCreate) SetName(s string) *IssueCreate {
	ic.mutation.SetName(s)
	return ic
}

// SetDescription sets the "description" field.
func (ic *IssueCreate) SetDescription(s string) *IssueCreate {
	ic.mutation.SetDescription(s)
	return ic
}

// SetStatus sets the "status" field.
func (ic *IssueCreate) SetStatus(i issue.Status) *IssueCreate {
	ic.mutation.SetStatus(i)
	return ic
}

// SetCreatedAt sets the "created_at" field.
func (ic *IssueCreate) SetCreatedAt(t time.Time) *IssueCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *IssueCreate) SetNillableCreatedAt(t *time.Time) *IssueCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetOwnerID sets the "owner_id" field.
func (ic *IssueCreate) SetOwnerID(i int) *IssueCreate {
	ic.mutation.SetOwnerID(i)
	return ic
}

// SetIssueCreatorID sets the "issueCreator" edge to the User entity by ID.
func (ic *IssueCreate) SetIssueCreatorID(id int) *IssueCreate {
	ic.mutation.SetIssueCreatorID(id)
	return ic
}

// SetIssueCreator sets the "issueCreator" edge to the User entity.
func (ic *IssueCreate) SetIssueCreator(u *User) *IssueCreate {
	return ic.SetIssueCreatorID(u.ID)
}

// AddAssignedTagIDs adds the "assignedTags" edge to the IssueTag entity by IDs.
func (ic *IssueCreate) AddAssignedTagIDs(ids ...int) *IssueCreate {
	ic.mutation.AddAssignedTagIDs(ids...)
	return ic
}

// AddAssignedTags adds the "assignedTags" edges to the IssueTag entity.
func (ic *IssueCreate) AddAssignedTags(i ...*IssueTag) *IssueCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddAssignedTagIDs(ids...)
}

// Mutation returns the IssueMutation object of the builder.
func (ic *IssueCreate) Mutation() *IssueMutation {
	return ic.mutation
}

// Save creates the Issue in the database.
func (ic *IssueCreate) Save(ctx context.Context) (*Issue, error) {
	var (
		err  error
		node *Issue
	)
	ic.defaults()
	if len(ic.hooks) == 0 {
		if err = ic.check(); err != nil {
			return nil, err
		}
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IssueMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ic.check(); err != nil {
				return nil, err
			}
			ic.mutation = mutation
			if node, err = ic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			if ic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IssueCreate) SaveX(ctx context.Context) *Issue {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *IssueCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *IssueCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *IssueCreate) defaults() {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := issue.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *IssueCreate) check() error {
	if _, ok := ic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Issue.name"`)}
	}
	if v, ok := ic.mutation.Name(); ok {
		if err := issue.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Issue.name": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Issue.description"`)}
	}
	if v, ok := ic.mutation.Description(); ok {
		if err := issue.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Issue.description": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Issue.status"`)}
	}
	if v, ok := ic.mutation.Status(); ok {
		if err := issue.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Issue.status": %w`, err)}
		}
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Issue.created_at"`)}
	}
	if _, ok := ic.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner_id", err: errors.New(`ent: missing required field "Issue.owner_id"`)}
	}
	if _, ok := ic.mutation.IssueCreatorID(); !ok {
		return &ValidationError{Name: "issueCreator", err: errors.New(`ent: missing required edge "Issue.issueCreator"`)}
	}
	return nil
}

func (ic *IssueCreate) sqlSave(ctx context.Context) (*Issue, error) {
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ic *IssueCreate) createSpec() (*Issue, *sqlgraph.CreateSpec) {
	var (
		_node = &Issue{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: issue.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: issue.FieldID,
			},
		}
	)
	if value, ok := ic.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: issue.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ic.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: issue.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := ic.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: issue.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: issue.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := ic.mutation.IssueCreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.IssueCreatorTable,
			Columns: []string{issue.IssueCreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.AssignedTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   issue.AssignedTagsTable,
			Columns: issue.AssignedTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: issuetag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IssueCreateBulk is the builder for creating many Issue entities in bulk.
type IssueCreateBulk struct {
	config
	builders []*IssueCreate
}

// Save creates the Issue entities in the database.
func (icb *IssueCreateBulk) Save(ctx context.Context) ([]*Issue, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Issue, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IssueMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *IssueCreateBulk) SaveX(ctx context.Context) []*Issue {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *IssueCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *IssueCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
