// Code generated by entc, DO NOT EDIT.

package issue

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the issue type in the database.
	Label = "issue"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// EdgeIssueCreator holds the string denoting the issuecreator edge name in mutations.
	EdgeIssueCreator = "issueCreator"
	// EdgeAssignedTags holds the string denoting the assignedtags edge name in mutations.
	EdgeAssignedTags = "assignedTags"
	// Table holds the table name of the issue in the database.
	Table = "issues"
	// IssueCreatorTable is the table that holds the issueCreator relation/edge.
	IssueCreatorTable = "issues"
	// IssueCreatorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	IssueCreatorInverseTable = "users"
	// IssueCreatorColumn is the table column denoting the issueCreator relation/edge.
	IssueCreatorColumn = "owner_id"
	// AssignedTagsTable is the table that holds the assignedTags relation/edge. The primary key declared below.
	AssignedTagsTable = "issue_assignedTags"
	// AssignedTagsInverseTable is the table name for the IssueTag entity.
	// It exists in this package in order to avoid circular dependency with the "issuetag" package.
	AssignedTagsInverseTable = "issue_tags"
)

// Columns holds all SQL columns for issue fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldStatus,
	FieldCreatedAt,
	FieldOwnerID,
}

var (
	// AssignedTagsPrimaryKey and AssignedTagsColumn2 are the table columns denoting the
	// primary key for the assignedTags relation (M2M).
	AssignedTagsPrimaryKey = []string{"issue_id", "issue_tag_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusOpen   Status = "Open"
	StatusClosed Status = "Closed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusOpen, StatusClosed:
		return nil
	default:
		return fmt.Errorf("issue: invalid enum value for status field: %q", s)
	}
}
