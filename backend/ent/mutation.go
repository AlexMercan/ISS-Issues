// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/ent/issue"
	"server/ent/issuetag"
	"server/ent/predicate"
	"server/ent/user"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeIssue    = "Issue"
	TypeIssueTag = "IssueTag"
	TypeUser     = "User"
)

// IssueMutation represents an operation that mutates the Issue nodes in the graph.
type IssueMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	description         *string
	status              *issue.Status
	created_at          *time.Time
	clearedFields       map[string]struct{}
	issueCreator        *int
	clearedissueCreator bool
	assignedTags        map[int]struct{}
	removedassignedTags map[int]struct{}
	clearedassignedTags bool
	done                bool
	oldValue            func(context.Context) (*Issue, error)
	predicates          []predicate.Issue
}

var _ ent.Mutation = (*IssueMutation)(nil)

// issueOption allows management of the mutation configuration using functional options.
type issueOption func(*IssueMutation)

// newIssueMutation creates new mutation for the Issue entity.
func newIssueMutation(c config, op Op, opts ...issueOption) *IssueMutation {
	m := &IssueMutation{
		config:        c,
		op:            op,
		typ:           TypeIssue,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIssueID sets the ID field of the mutation.
func withIssueID(id int) issueOption {
	return func(m *IssueMutation) {
		var (
			err   error
			once  sync.Once
			value *Issue
		)
		m.oldValue = func(ctx context.Context) (*Issue, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Issue.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIssue sets the old Issue of the mutation.
func withIssue(node *Issue) issueOption {
	return func(m *IssueMutation) {
		m.oldValue = func(context.Context) (*Issue, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IssueMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IssueMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *IssueMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *IssueMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Issue.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *IssueMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *IssueMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Issue entity.
// If the Issue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IssueMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *IssueMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *IssueMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *IssueMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Issue entity.
// If the Issue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IssueMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *IssueMutation) ResetDescription() {
	m.description = nil
}

// SetStatus sets the "status" field.
func (m *IssueMutation) SetStatus(i issue.Status) {
	m.status = &i
}

// Status returns the value of the "status" field in the mutation.
func (m *IssueMutation) Status() (r issue.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Issue entity.
// If the Issue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IssueMutation) OldStatus(ctx context.Context) (v issue.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *IssueMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *IssueMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *IssueMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Issue entity.
// If the Issue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IssueMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *IssueMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetOwnerID sets the "owner_id" field.
func (m *IssueMutation) SetOwnerID(i int) {
	m.issueCreator = &i
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *IssueMutation) OwnerID() (r int, exists bool) {
	v := m.issueCreator
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the Issue entity.
// If the Issue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IssueMutation) OldOwnerID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *IssueMutation) ResetOwnerID() {
	m.issueCreator = nil
}

// SetIssueCreatorID sets the "issueCreator" edge to the User entity by id.
func (m *IssueMutation) SetIssueCreatorID(id int) {
	m.issueCreator = &id
}

// ClearIssueCreator clears the "issueCreator" edge to the User entity.
func (m *IssueMutation) ClearIssueCreator() {
	m.clearedissueCreator = true
}

// IssueCreatorCleared reports if the "issueCreator" edge to the User entity was cleared.
func (m *IssueMutation) IssueCreatorCleared() bool {
	return m.clearedissueCreator
}

// IssueCreatorID returns the "issueCreator" edge ID in the mutation.
func (m *IssueMutation) IssueCreatorID() (id int, exists bool) {
	if m.issueCreator != nil {
		return *m.issueCreator, true
	}
	return
}

// IssueCreatorIDs returns the "issueCreator" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// IssueCreatorID instead. It exists only for internal usage by the builders.
func (m *IssueMutation) IssueCreatorIDs() (ids []int) {
	if id := m.issueCreator; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetIssueCreator resets all changes to the "issueCreator" edge.
func (m *IssueMutation) ResetIssueCreator() {
	m.issueCreator = nil
	m.clearedissueCreator = false
}

// AddAssignedTagIDs adds the "assignedTags" edge to the IssueTag entity by ids.
func (m *IssueMutation) AddAssignedTagIDs(ids ...int) {
	if m.assignedTags == nil {
		m.assignedTags = make(map[int]struct{})
	}
	for i := range ids {
		m.assignedTags[ids[i]] = struct{}{}
	}
}

// ClearAssignedTags clears the "assignedTags" edge to the IssueTag entity.
func (m *IssueMutation) ClearAssignedTags() {
	m.clearedassignedTags = true
}

// AssignedTagsCleared reports if the "assignedTags" edge to the IssueTag entity was cleared.
func (m *IssueMutation) AssignedTagsCleared() bool {
	return m.clearedassignedTags
}

// RemoveAssignedTagIDs removes the "assignedTags" edge to the IssueTag entity by IDs.
func (m *IssueMutation) RemoveAssignedTagIDs(ids ...int) {
	if m.removedassignedTags == nil {
		m.removedassignedTags = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.assignedTags, ids[i])
		m.removedassignedTags[ids[i]] = struct{}{}
	}
}

// RemovedAssignedTags returns the removed IDs of the "assignedTags" edge to the IssueTag entity.
func (m *IssueMutation) RemovedAssignedTagsIDs() (ids []int) {
	for id := range m.removedassignedTags {
		ids = append(ids, id)
	}
	return
}

// AssignedTagsIDs returns the "assignedTags" edge IDs in the mutation.
func (m *IssueMutation) AssignedTagsIDs() (ids []int) {
	for id := range m.assignedTags {
		ids = append(ids, id)
	}
	return
}

// ResetAssignedTags resets all changes to the "assignedTags" edge.
func (m *IssueMutation) ResetAssignedTags() {
	m.assignedTags = nil
	m.clearedassignedTags = false
	m.removedassignedTags = nil
}

// Where appends a list predicates to the IssueMutation builder.
func (m *IssueMutation) Where(ps ...predicate.Issue) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *IssueMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Issue).
func (m *IssueMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *IssueMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, issue.FieldName)
	}
	if m.description != nil {
		fields = append(fields, issue.FieldDescription)
	}
	if m.status != nil {
		fields = append(fields, issue.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, issue.FieldCreatedAt)
	}
	if m.issueCreator != nil {
		fields = append(fields, issue.FieldOwnerID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *IssueMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case issue.FieldName:
		return m.Name()
	case issue.FieldDescription:
		return m.Description()
	case issue.FieldStatus:
		return m.Status()
	case issue.FieldCreatedAt:
		return m.CreatedAt()
	case issue.FieldOwnerID:
		return m.OwnerID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *IssueMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case issue.FieldName:
		return m.OldName(ctx)
	case issue.FieldDescription:
		return m.OldDescription(ctx)
	case issue.FieldStatus:
		return m.OldStatus(ctx)
	case issue.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case issue.FieldOwnerID:
		return m.OldOwnerID(ctx)
	}
	return nil, fmt.Errorf("unknown Issue field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IssueMutation) SetField(name string, value ent.Value) error {
	switch name {
	case issue.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case issue.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case issue.FieldStatus:
		v, ok := value.(issue.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case issue.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case issue.FieldOwnerID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	}
	return fmt.Errorf("unknown Issue field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *IssueMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *IssueMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IssueMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Issue numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *IssueMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *IssueMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *IssueMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Issue nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *IssueMutation) ResetField(name string) error {
	switch name {
	case issue.FieldName:
		m.ResetName()
		return nil
	case issue.FieldDescription:
		m.ResetDescription()
		return nil
	case issue.FieldStatus:
		m.ResetStatus()
		return nil
	case issue.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case issue.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	}
	return fmt.Errorf("unknown Issue field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *IssueMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.issueCreator != nil {
		edges = append(edges, issue.EdgeIssueCreator)
	}
	if m.assignedTags != nil {
		edges = append(edges, issue.EdgeAssignedTags)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *IssueMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case issue.EdgeIssueCreator:
		if id := m.issueCreator; id != nil {
			return []ent.Value{*id}
		}
	case issue.EdgeAssignedTags:
		ids := make([]ent.Value, 0, len(m.assignedTags))
		for id := range m.assignedTags {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *IssueMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedassignedTags != nil {
		edges = append(edges, issue.EdgeAssignedTags)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *IssueMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case issue.EdgeAssignedTags:
		ids := make([]ent.Value, 0, len(m.removedassignedTags))
		for id := range m.removedassignedTags {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *IssueMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedissueCreator {
		edges = append(edges, issue.EdgeIssueCreator)
	}
	if m.clearedassignedTags {
		edges = append(edges, issue.EdgeAssignedTags)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *IssueMutation) EdgeCleared(name string) bool {
	switch name {
	case issue.EdgeIssueCreator:
		return m.clearedissueCreator
	case issue.EdgeAssignedTags:
		return m.clearedassignedTags
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *IssueMutation) ClearEdge(name string) error {
	switch name {
	case issue.EdgeIssueCreator:
		m.ClearIssueCreator()
		return nil
	}
	return fmt.Errorf("unknown Issue unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *IssueMutation) ResetEdge(name string) error {
	switch name {
	case issue.EdgeIssueCreator:
		m.ResetIssueCreator()
		return nil
	case issue.EdgeAssignedTags:
		m.ResetAssignedTags()
		return nil
	}
	return fmt.Errorf("unknown Issue edge %s", name)
}

// IssueTagMutation represents an operation that mutates the IssueTag nodes in the graph.
type IssueTagMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	name                  *string
	clearedFields         map[string]struct{}
	assignedIssues        map[int]struct{}
	removedassignedIssues map[int]struct{}
	clearedassignedIssues bool
	done                  bool
	oldValue              func(context.Context) (*IssueTag, error)
	predicates            []predicate.IssueTag
}

var _ ent.Mutation = (*IssueTagMutation)(nil)

// issuetagOption allows management of the mutation configuration using functional options.
type issuetagOption func(*IssueTagMutation)

// newIssueTagMutation creates new mutation for the IssueTag entity.
func newIssueTagMutation(c config, op Op, opts ...issuetagOption) *IssueTagMutation {
	m := &IssueTagMutation{
		config:        c,
		op:            op,
		typ:           TypeIssueTag,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIssueTagID sets the ID field of the mutation.
func withIssueTagID(id int) issuetagOption {
	return func(m *IssueTagMutation) {
		var (
			err   error
			once  sync.Once
			value *IssueTag
		)
		m.oldValue = func(ctx context.Context) (*IssueTag, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().IssueTag.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIssueTag sets the old IssueTag of the mutation.
func withIssueTag(node *IssueTag) issuetagOption {
	return func(m *IssueTagMutation) {
		m.oldValue = func(context.Context) (*IssueTag, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IssueTagMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IssueTagMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *IssueTagMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *IssueTagMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().IssueTag.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *IssueTagMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *IssueTagMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the IssueTag entity.
// If the IssueTag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IssueTagMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *IssueTagMutation) ResetName() {
	m.name = nil
}

// AddAssignedIssueIDs adds the "assignedIssues" edge to the Issue entity by ids.
func (m *IssueTagMutation) AddAssignedIssueIDs(ids ...int) {
	if m.assignedIssues == nil {
		m.assignedIssues = make(map[int]struct{})
	}
	for i := range ids {
		m.assignedIssues[ids[i]] = struct{}{}
	}
}

// ClearAssignedIssues clears the "assignedIssues" edge to the Issue entity.
func (m *IssueTagMutation) ClearAssignedIssues() {
	m.clearedassignedIssues = true
}

// AssignedIssuesCleared reports if the "assignedIssues" edge to the Issue entity was cleared.
func (m *IssueTagMutation) AssignedIssuesCleared() bool {
	return m.clearedassignedIssues
}

// RemoveAssignedIssueIDs removes the "assignedIssues" edge to the Issue entity by IDs.
func (m *IssueTagMutation) RemoveAssignedIssueIDs(ids ...int) {
	if m.removedassignedIssues == nil {
		m.removedassignedIssues = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.assignedIssues, ids[i])
		m.removedassignedIssues[ids[i]] = struct{}{}
	}
}

// RemovedAssignedIssues returns the removed IDs of the "assignedIssues" edge to the Issue entity.
func (m *IssueTagMutation) RemovedAssignedIssuesIDs() (ids []int) {
	for id := range m.removedassignedIssues {
		ids = append(ids, id)
	}
	return
}

// AssignedIssuesIDs returns the "assignedIssues" edge IDs in the mutation.
func (m *IssueTagMutation) AssignedIssuesIDs() (ids []int) {
	for id := range m.assignedIssues {
		ids = append(ids, id)
	}
	return
}

// ResetAssignedIssues resets all changes to the "assignedIssues" edge.
func (m *IssueTagMutation) ResetAssignedIssues() {
	m.assignedIssues = nil
	m.clearedassignedIssues = false
	m.removedassignedIssues = nil
}

// Where appends a list predicates to the IssueTagMutation builder.
func (m *IssueTagMutation) Where(ps ...predicate.IssueTag) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *IssueTagMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (IssueTag).
func (m *IssueTagMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *IssueTagMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, issuetag.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *IssueTagMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case issuetag.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *IssueTagMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case issuetag.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown IssueTag field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IssueTagMutation) SetField(name string, value ent.Value) error {
	switch name {
	case issuetag.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown IssueTag field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *IssueTagMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *IssueTagMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IssueTagMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown IssueTag numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *IssueTagMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *IssueTagMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *IssueTagMutation) ClearField(name string) error {
	return fmt.Errorf("unknown IssueTag nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *IssueTagMutation) ResetField(name string) error {
	switch name {
	case issuetag.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown IssueTag field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *IssueTagMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.assignedIssues != nil {
		edges = append(edges, issuetag.EdgeAssignedIssues)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *IssueTagMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case issuetag.EdgeAssignedIssues:
		ids := make([]ent.Value, 0, len(m.assignedIssues))
		for id := range m.assignedIssues {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *IssueTagMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedassignedIssues != nil {
		edges = append(edges, issuetag.EdgeAssignedIssues)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *IssueTagMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case issuetag.EdgeAssignedIssues:
		ids := make([]ent.Value, 0, len(m.removedassignedIssues))
		for id := range m.removedassignedIssues {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *IssueTagMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedassignedIssues {
		edges = append(edges, issuetag.EdgeAssignedIssues)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *IssueTagMutation) EdgeCleared(name string) bool {
	switch name {
	case issuetag.EdgeAssignedIssues:
		return m.clearedassignedIssues
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *IssueTagMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown IssueTag unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *IssueTagMutation) ResetEdge(name string) error {
	switch name {
	case issuetag.EdgeAssignedIssues:
		m.ResetAssignedIssues()
		return nil
	}
	return fmt.Errorf("unknown IssueTag edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	username             *string
	role                 *user.Role
	password             *string
	clearedFields        map[string]struct{}
	issuesCreated        map[int]struct{}
	removedissuesCreated map[int]struct{}
	clearedissuesCreated bool
	done                 bool
	oldValue             func(context.Context) (*User, error)
	predicates           []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(u user.Role) {
	m.role = &u
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r user.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v user.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// AddIssuesCreatedIDs adds the "issuesCreated" edge to the Issue entity by ids.
func (m *UserMutation) AddIssuesCreatedIDs(ids ...int) {
	if m.issuesCreated == nil {
		m.issuesCreated = make(map[int]struct{})
	}
	for i := range ids {
		m.issuesCreated[ids[i]] = struct{}{}
	}
}

// ClearIssuesCreated clears the "issuesCreated" edge to the Issue entity.
func (m *UserMutation) ClearIssuesCreated() {
	m.clearedissuesCreated = true
}

// IssuesCreatedCleared reports if the "issuesCreated" edge to the Issue entity was cleared.
func (m *UserMutation) IssuesCreatedCleared() bool {
	return m.clearedissuesCreated
}

// RemoveIssuesCreatedIDs removes the "issuesCreated" edge to the Issue entity by IDs.
func (m *UserMutation) RemoveIssuesCreatedIDs(ids ...int) {
	if m.removedissuesCreated == nil {
		m.removedissuesCreated = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.issuesCreated, ids[i])
		m.removedissuesCreated[ids[i]] = struct{}{}
	}
}

// RemovedIssuesCreated returns the removed IDs of the "issuesCreated" edge to the Issue entity.
func (m *UserMutation) RemovedIssuesCreatedIDs() (ids []int) {
	for id := range m.removedissuesCreated {
		ids = append(ids, id)
	}
	return
}

// IssuesCreatedIDs returns the "issuesCreated" edge IDs in the mutation.
func (m *UserMutation) IssuesCreatedIDs() (ids []int) {
	for id := range m.issuesCreated {
		ids = append(ids, id)
	}
	return
}

// ResetIssuesCreated resets all changes to the "issuesCreated" edge.
func (m *UserMutation) ResetIssuesCreated() {
	m.issuesCreated = nil
	m.clearedissuesCreated = false
	m.removedissuesCreated = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldRole:
		return m.Role()
	case user.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldRole:
		v, ok := value.(user.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.issuesCreated != nil {
		edges = append(edges, user.EdgeIssuesCreated)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeIssuesCreated:
		ids := make([]ent.Value, 0, len(m.issuesCreated))
		for id := range m.issuesCreated {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedissuesCreated != nil {
		edges = append(edges, user.EdgeIssuesCreated)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeIssuesCreated:
		ids := make([]ent.Value, 0, len(m.removedissuesCreated))
		for id := range m.removedissuesCreated {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedissuesCreated {
		edges = append(edges, user.EdgeIssuesCreated)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeIssuesCreated:
		return m.clearedissuesCreated
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeIssuesCreated:
		m.ResetIssuesCreated()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
