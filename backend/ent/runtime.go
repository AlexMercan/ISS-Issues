// Code generated by entc, DO NOT EDIT.

package ent

import (
	"server/ent/issue"
	"server/ent/issuetag"
	"server/ent/schema"
	"server/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	issueFields := schema.Issue{}.Fields()
	_ = issueFields
	// issueDescName is the schema descriptor for name field.
	issueDescName := issueFields[0].Descriptor()
	// issue.NameValidator is a validator for the "name" field. It is called by the builders before save.
	issue.NameValidator = func() func(string) error {
		validators := issueDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// issueDescDescription is the schema descriptor for description field.
	issueDescDescription := issueFields[1].Descriptor()
	// issue.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	issue.DescriptionValidator = func() func(string) error {
		validators := issueDescDescription.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(description string) error {
			for _, fn := range fns {
				if err := fn(description); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// issueDescCreatedAt is the schema descriptor for created_at field.
	issueDescCreatedAt := issueFields[3].Descriptor()
	// issue.DefaultCreatedAt holds the default value on creation for the created_at field.
	issue.DefaultCreatedAt = issueDescCreatedAt.Default.(func() time.Time)
	issuetagFields := schema.IssueTag{}.Fields()
	_ = issuetagFields
	// issuetagDescName is the schema descriptor for name field.
	issuetagDescName := issuetagFields[0].Descriptor()
	// issuetag.NameValidator is a validator for the "name" field. It is called by the builders before save.
	issuetag.NameValidator = func() func(string) error {
		validators := issuetagDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[0].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = func() func(string) error {
		validators := userDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[2].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
}
