// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// IssuesColumns holds the columns for the "issues" table.
	IssuesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Size: 25},
		{Name: "description", Type: field.TypeString, Size: 256},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"Open", "Closed"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "owner_id", Type: field.TypeInt},
	}
	// IssuesTable holds the schema information for the "issues" table.
	IssuesTable = &schema.Table{
		Name:       "issues",
		Columns:    IssuesColumns,
		PrimaryKey: []*schema.Column{IssuesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "issues_users_issuesCreated",
				Columns:    []*schema.Column{IssuesColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// IssueTagsColumns holds the columns for the "issue_tags" table.
	IssueTagsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true, Size: 15},
	}
	// IssueTagsTable holds the schema information for the "issue_tags" table.
	IssueTagsTable = &schema.Table{
		Name:       "issue_tags",
		Columns:    IssueTagsColumns,
		PrimaryKey: []*schema.Column{IssueTagsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "username", Type: field.TypeString, Unique: true, Size: 13},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"Programmer", "Tester"}, Default: "Tester"},
		{Name: "password", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// IssueAssignedTagsColumns holds the columns for the "issue_assignedTags" table.
	IssueAssignedTagsColumns = []*schema.Column{
		{Name: "issue_id", Type: field.TypeInt},
		{Name: "issue_tag_id", Type: field.TypeInt},
	}
	// IssueAssignedTagsTable holds the schema information for the "issue_assignedTags" table.
	IssueAssignedTagsTable = &schema.Table{
		Name:       "issue_assignedTags",
		Columns:    IssueAssignedTagsColumns,
		PrimaryKey: []*schema.Column{IssueAssignedTagsColumns[0], IssueAssignedTagsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "issue_assignedTags_issue_id",
				Columns:    []*schema.Column{IssueAssignedTagsColumns[0]},
				RefColumns: []*schema.Column{IssuesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "issue_assignedTags_issue_tag_id",
				Columns:    []*schema.Column{IssueAssignedTagsColumns[1]},
				RefColumns: []*schema.Column{IssueTagsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		IssuesTable,
		IssueTagsTable,
		UsersTable,
		IssueAssignedTagsTable,
	}
)

func init() {
	IssuesTable.ForeignKeys[0].RefTable = UsersTable
	IssueAssignedTagsTable.ForeignKeys[0].RefTable = IssuesTable
	IssueAssignedTagsTable.ForeignKeys[1].RefTable = IssueTagsTable
}
